) %>%
summarise(
num = n()
)
count.actions
# summary of final scores in all games
bh_all_scoreSum <- bh_all %>%
group_by(opponent, game) %>%
summarise(
our_final_score = max(our_score),
their_final_score = max(their_score)
)
bh_all_scoreSum
# add window column for total number of each action per game
total.up.acts <- bh_all %>%
select(
elapsed_time,
ind.gme, action
) %>%
group_by(ind.gme, action) %>%
mutate(
total.per.act = n()
)
total.up.acts
tail(total.up.acts)
# who got the most Ds?
Ds_perPlayer <- bh_all %>%
group_by(defender) %>%
filter(action == 'D', !is.na(defender), defender != '') %>%
select(defender, action) %>%
summarise(
blocks = n()
) %>%
arrange(desc(blocks)) %>%
print(n=30)
Ds_perPlayer
# most goals?
goals_perPlayer <- bh_all %>%
group_by(receiver) %>%
filter(action == 'Goal', !is.na(receiver), receiver != '') %>%
select(receiver, action) %>%
summarise(
goals = n()
) %>%
arrange(desc(goals)) %>%
print(n=30)
goals_perPlayer
# calculate plus minus per player
plus_minus <- bh %>%
select(
name, action
) %>%
group_by(
name
) %>%
summarise(
goals = sum(action == 'Goal'),
Ds = sum(action == 'D'),
throwaways = sum(action == 'Throwaway'),
drops = sum(action == 'Drop'),
p_m = (goals + Ds) - (throwaways + drops)
) %>%
arrange(desc(
p_m
)) %>%
print(n = 50)
# plus minus per player per game      # doesn't work yet
plus_minus_per_game <- bh %>%
select(
name, action, ind.gme
) %>%
group_by(
name, ind.gme
) %>%
summarise(
goals = mean(action == 'Goal'),
Ds = mean(action == 'D'),
throwaways = mean(action == 'Throwaway'),
drops = mean(action == 'Drop'),
p_m = (goals + Ds) - (throwaways + drops)
) %>%
ungroup() %>%
nest(
name
) %>%
arrange(desc(
p_m
)) %>%
print(n = 50)
# add cumulative columns per individual game
bh_all_cumsums <- bh_all %>%
# select(action, opponent, ind.gme) %>%
group_by(
ind.gme
) %>%
mutate(
catch = ifelse(action=='Catch', 1, 0),
cum.catch = cumsum(catch),
block = ifelse(action=='D', 1, 0),
cum.block = cumsum(block),
throwaway = ifelse(action=='Throwaway', 1, 0),
cum.throwaway = cumsum(throwaway),
drop = ifelse(action=='Drop', 1, 0),
cum.drop = cumsum(drop),
goal = ifelse(action=='Goal', 1, 0),
cum.goal = cumsum(goal)
)
bh_all_cumsums
tail(bh_all_cumsums)
# scale elapsed time over game
# add to big tibble
bh_all_scale_time <- bh_all_cumsums %>%
group_by(
ind.gme
) %>%
mutate(
e_time_scale = scale(elapsed_time)
)
# add scaled elapsed time column to bh
bh_scale_time <- bh %>%
group_by(
ind.gme
) %>%
mutate(
e_time_scale = scale(elapsed_time)
)
bh_scale_time
# get a running point diff column
bh_pt.diff <- bh_all %>%
mutate(
pt_diff = our_score - their_score
)
# linear model with opponent, elapsed_time, and their interaction predicting difference in
# our_score and their_score
pt.diff.mod.e_time <- lm(pt_diff ~ opponent * elapsed_time, data = bh_pt.diff)
# take opponent out of the model
pt.diff.e_time.no.opponent <- update(pt.diff.mod.e_time, . ~ . - opponent)
library(lmtest)
# test whether model with opponent (pt.diff.mod) is better at predicting point diff than model without
lrtest(pt.diff.mod.e_time, pt.diff.e_time.no.opponent) # yes, opponent is a significant predictor of point diff
# model with just opponent
pt.diff.mod <- lm(pt_diff ~ opponent, data = bh_pt.diff)
# take opponent out of the model
pt.diff.no.opponent <- update(pt.diff.mod, . ~ . - opponent)
library(lmtest)
# test whether model with opponent (pt.diff.mod) is better at predicting point diff than model without
lrtest(pt.diff.mod, pt.diff.no.opponent) # yes, opponent is a significant predictor of point diff
plus_minus
bh
bh_do_we_score
bh_all.by.game
bh_pt.diff
bh
?exists
exists("m")
m <- lmer(our_score ~ opponent + (1 | name))
library(stats)
m <- lmer(our_score ~ opponent + (1 | name))
library(lme4)
m <- lmer(our_score ~ opponent + (1 | name))
bh_pt.diff
m <- lmer(our_score ~ opponent + (1 | name), data = bh)
m
anova(m, m.no.opponent)
m.no.opponent <- update(m, . ~ . - opponent)
anova(m, m.no.opponent)
?lmer
bh
m <- lmer(our_score ~ opponent + (1 + ind.gme | name), data = bh)
m
m.no.opponent <- update(m, . ~ . - opponent)
anova(m, m.no.opponent)
# the schedule, graphically
plot_by_game <- ggplot(bh_all, aes(opponent, ind.game))
plot_by_game + geom_point()
# just take first game
bh_game1 <- bh_all %>%
filter(
ind.game == '1'
)
# each individual action over the course of the game plotted as one point
tseries.game1 <- ggplot(bh_game1, aes(elapsed_time, action))
tseries.game1 + geom_point()
bh_all
# the schedule, graphically
plot_by_game <- ggplot(bh_all, aes(opponent, ind.gme))
plot_by_game + geom_point()
# just take first game
bh_game1 <- bh_all %>%
filter(
ind.gme == '1'
)
# each individual action over the course of the game plotted as one point
tseries.game1 <- ggplot(bh_game1, aes(elapsed_time, action))
tseries.game1 + geom_point()
# get cumulative sums just for game 1
bh_all_cumsums_g1 <- bh_all_cumsums %>%
filter(
ind.gme == '1'
)
# limit to games played against the Radicals
rad_games <- bh_all_cumsums %>%
filter(
opponent == 'Radicals'
) %>%
group_by(
game
) %>%
ungroup()
rad_games
# plot number of Ds per game over time, smoothed
rad_plot_blocks <- ggplot(data = rad_games, aes(x = elapsed_time, colour = game))
rad_plot_blocks + geom_smooth(aes(y = cum.block))
# same but with faceting
rad_plot_blocks_facet <- ggplot(data = rad_games, aes(x = elapsed_time)) + facet_grid(. ~ game)
rad_plot_blocks_facet + geom_smooth(aes(y = cum.block))
# our score, their score, our total number of Ds
rad_plot <- ggplot(data = rad_games, aes(x = elapsed_time), group = game) + facet_grid(. ~ game)
rad_plot + geom_smooth(aes(y = cum.block, colour = "green")) +
geom_smooth(aes(y = our_score, colour = "blue")) +   # different when you use cum.goal but it shouldn't be...
geom_smooth(aes(y = their_score, colour = "red")) +
scale_colour_discrete(name = "Running Totals",
labels = c("Their Score", "Our Ds", "Our Score"))  # also need to play around with order of these
rad_plot <- ggplot(data = rad_games, aes(x = elapsed_time), group = game) + facet_grid(. ~ game)
rad_plot + geom_smooth(aes(y = cum.block, colour = "green")) +
geom_smooth(aes(y = our_score, colour = "blue")) +
geom_smooth(aes(y = their_score, colour = "red")) +
scale_colour_discrete(name = "Running Totals",
labels = c("Our Score", "Their Score", "Our Ds"))  # need to play around with order of these
rad_plot <- ggplot(data = rad_games, aes(x = elapsed_time), group = game) + facet_grid(. ~ game)
rad_plot + geom_smooth(aes(y = cum.block, colour = "green")) +
geom_smooth(aes(y = our_score, colour = "blue")) +
geom_smooth(aes(y = their_score, colour = "red")) +
scale_colour_discrete(name = "Running Totals",
labels = c("Our Score", "Our Ds", "Their Score"))  # need to play around with order of these
# ~ experimenting
rad_plot_exp <- ggplot(data = rad_games, aes(x = elapsed_time)) + facet_grid(. ~ game)
rad_plot_exp + geom_point(aes(y = cum.block, colour = defender)) +
geom_line(aes(y = cum.goal, colour = receiver))
# ~ experimenting
rad_plot_exp <- ggplot(data = rad_games, aes(x = elapsed_time)) + facet_grid(. ~ game)
rad_plot_exp + geom_point(aes(y = cum.block, colour = defender)) +
geom_point(aes(y = cum.goal, colour = receiver))
# get measure of mvp as goals vs. blocks over the season
mvp <- bh_all_cumsums %>%
ungroup() %>%
group_by(receiver) %>%
summarise(
season.blocks = max(cum.block),
season.goals = max(cum.goal)
) %>%
arrange(desc(
season.blocks
)) %>%
print(n = 50)
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, colour = receiver))
mvp_plot + geom_point()
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, colour = receiver))
mvp_plot + geom_point() +
scale_colour_discrete(name = "Player Name") +
opts(title = "MVP")
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, colour = receiver))
mvp_plot + geom_point() +
scale_colour_discrete(name = "Player Name") +
ggtitle("MVP")
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, colour = receiver))
mvp_plot + geom_point() +
scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 0, nudge_x = 0.05)
?geom_text
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, label = receiver))
mvp_plot + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 0, nudge_x = 0.05)
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, label = receiver, colour= receiver))
mvp_plot + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 0, nudge_x = 0.05)
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, label = receiver))
mvp_plot + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 0, nudge_x = 0.05)
# get measure of mvp as goals vs. blocks over the season
mvp <- bh_all_cumsums %>%
ungroup() %>%
group_by(receiver) %>%
filter(
-Anonymous
) %>%
summarise(
season.blocks = max(cum.block),
season.goals = max(cum.goal)
) %>%
arrange(desc(
season.blocks
)) %>%
print(n = 50)
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, label = receiver))
mvp_plot + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 0, nudge_x = 0.05)
# get measure of mvp as goals vs. blocks over the season
mvp <- bh_all_cumsums %>%
ungroup() %>%
group_by(receiver) %>%
filter(
-Anonymous
) %>%
summarise(
season.blocks = max(cum.block),
season.goals = max(cum.goal)
) %>%
arrange(desc(
season.blocks
)) %>%
print(n = 50)
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, label = receiver))
mvp_plot + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 0, nudge_x = 0.3)
# get measure of mvp as goals vs. blocks over the season
mvp <- bh_all_cumsums %>%
ungroup() %>%
group_by(receiver) %>%
filter(
-Anonymous
) %>%
summarise(
season.blocks = max(cum.block),
season.goals = max(cum.goal)
) %>%
arrange(desc(
season.blocks
)) %>%
print(n = 50)
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, label = receiver))
mvp_plot + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 5, nudge_x = 0.3)
mvp
mvp <- bh_all_cumsums %>%
ungroup() %>%
group_by(receiver) %>%
filter(
- Anonymous
) %>%
summarise(
season.blocks = max(cum.block),
season.goals = max(cum.goal)
) %>%
arrange(desc(
season.blocks
)) %>%
print(n = 50)
# get measure of mvp as goals vs. blocks over the season
mvp <- bh_all_cumsums %>%
ungroup() %>%
group_by(receiver) %>%
filter(
receiver != Anonymous
) %>%
summarise(
season.blocks = max(cum.block),
season.goals = max(cum.goal)
) %>%
arrange(desc(
season.blocks
)) %>%
print(n = 50)
unique(mvp$receiver)
# get measure of mvp as goals vs. blocks over the season
mvp <- bh_all_cumsums %>%
ungroup() %>%
group_by(receiver) %>%
filter(
receiver != "Anonymous"
) %>%
summarise(
season.blocks = max(cum.block),
season.goals = max(cum.goal)
) %>%
arrange(desc(
season.blocks
)) %>%
print(n = 50)
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals, label = receiver)) # , colour = receiver
mvp_plot + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 0, nudge_x = 0.3)
# plot each player's season blocks vs. their goals
mvp_plot <- ggplot(data = mvp, aes(x = season.blocks, y = season.goals,
label = receiver, angle = 45)) # , colour = receiver
mvp_plot + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 0, nudge_x = 0.3)
library(ggrepel)
install.packages("ggrepel")
library(ggrepel)
mvp_plot + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
# geom_text(hjust = 0, nudge_x = 0.3)
geom_text_repel(aes(label = receiver),
box.padding = unit(0.45, "lines"))
Ds_perPlayer
plus_minus
mvp_plot_2 <- ggplot(data = plus_minus, aes(x = Ds, y = goals,
label = receiver, angle = 45)) # , colour = receiver
mvp_plot_2 + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
# geom_text(hjust = 0, nudge_x = 0.3)
geom_text_repel(aes(label = receiver),
box.padding = unit(0.45, "lines"))
mvp_plot_2 <- ggplot(data = plus_minus, aes(x = Ds, y = goals,
label = name, angle = 45)) # , colour = receiver
mvp_plot_2 + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
# geom_text(hjust = 0, nudge_x = 0.3)
geom_text_repel(aes(label = name),
box.padding = unit(0.45, "lines"))
mvplus_minus <- plus_minus %>%
filter(receiver != "Anonymous")
mvp_plot_2 <- ggplot(data = mvplus_minus, aes(x = Ds, y = goals,
label = name, angle = 45)) # , colour = receiver
mvp_plot_2 + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
# geom_text(hjust = 0, nudge_x = 0.3)
geom_text_repel(aes(label = name),
box.padding = unit(0.45, "lines"))
mvplus_minus <- plus_minus %>%
filter(name != "Anonymous")
mvp_plot_2 <- ggplot(data = mvplus_minus, aes(x = Ds, y = goals,
label = name, angle = 45)) # , colour = receiver
mvp_plot_2 + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
# geom_text(hjust = 0, nudge_x = 0.3)
geom_text_repel(aes(label = name),
box.padding = unit(0.45, "lines"))
mvp_plot_2 + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
geom_text(hjust = 0, nudge_x = 0.3)
mvp_plot_2 + geom_point() +
# scale_colour_discrete(name = "Player Name") +
ggtitle("MVP") +
xlab("Season Blocks") +
ylab("Season Goals") +
# geom_text(hjust = 0, nudge_x = 0.3)
geom_text_repel(aes(label = name),
box.padding = unit(0.45, "lines"))
plus_minus %>% print(n = 50)
suppressWarnings()
install.packages("dtplyr")
library(dtplyr)
install.packages("pacman")
library(pacman)
str(... =)
str(... = )
